# 기본적인 인수전달 방법
# 1. CallByValue: 실제 인수의 값을 매개변수에 복사에 의한 호출
# 2. CallByReference: 실제 인수의 참조를 매개변수에 복사하여 매개변수가 실제 인수와 같아지는 참조에 의한 호출

# Parameter (매개변수)
# 함수 정의 시 함수가 입력을 받을 때 사용하는 변수 이름
# 즉, 함수 정의에서 입력값을 받기 위해 선언하는 이름
# 예) def func(x, y): 여기서 x, y가 파라미터

# Argument (인자, 인수)
# 함수를 호출할 때 실제로 전달하는 값
# 함수가 실행될 때 파라미터에 할당되는 구체적인 데이터
# 예) func(10, 20) 여기서 10과 20이 인자

# 파이썬은 두 호출의 중간적인 방식으로 참조하는 값을 전달
# CallByObjectReference
# 함수의 실행 시작 시점에서 매개변수는 실제 인수와 같은 객체를 참조, 함수에서 매개변수의 값을 변견하면 인수의 형에 따라 다음과 같이 구분
# - Immutable: 함수 안에서 매개변수의 값을 변경하면 다른  객체를 생성하고 그 객체에 대한 첨조로 업데이트
#              따라서 매개변수의 값을 변경해도 호출하는 쪽의 실제 인수에는 영향을 주지 않음
# - mutable: 함수 안에서 매개변수의 값을 변경하면 객체 자체를 업데이트
#            따라서 매개변수의 값을 호출하는 실제 인수의 값이 변경됨

# 얕은 복사(shallow copy)
# 객체의 참조값(주소)만 복사하는 방식
# 최상위 객체는 새로 만들어지지만, 내부에 있는 객체들은 원본과 동일한 객체를 참조
# 방법: = (대입), copy.copy(), [:] (슬라이싱), list.copy() 등.

# 깊은 복사(deep copy)
# 참조값 뿐만 아니라 참조하는 객체 자치를 복사. 즉, 객체가 갖는 모든 맴버(값과 참조 형식 모두)를 복사하므로 전체 복사라고도 함
# 원본과 복사본이 완전히 독립적이 되어 서로 영향을 주지 않음
# 방법: copy.deepcopy() 사용


from typing import Sequence


def sum_1_to_n(n):
    """1부터 n까지 정수의 합"""
    print(f"id of n = {id(n)}")
    sum = 0
    while n > 0:
        sum += n
        n -= 1
    return sum


def change_parameter_value(l: list) -> None:
    """함수가 받아온 매개변수의 값 변경"""
    l[0] = 10


if __name__ == "__main__":
    num = 10
    print(f"id of num = {id(num)}")
    print(sum_1_to_n(num))

    l = [1, 2, 3, 4, 5]
    change_parameter_value(l)
    print(l)  # [10, 2, 3, 4, 5]
